/*
 * This file is generated by jOOQ.
*/
package lu.btsi.bragi.ros.models.pojos;


import org.jooq.types.UInteger;

import javax.annotation.Generated;
import java.io.Serializable;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import static java.util.stream.Collectors.toList;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Invoice implements Serializable {

    private static final long serialVersionUID = -852538769;

    private UInteger  id;
    private Byte      paid;
    private Timestamp createdAt;
    private Timestamp updatedAt;
    private List<Order> orders;

    public Invoice() {}

    public Invoice(Invoice value) {
        this.id = value.id;
        this.paid = value.paid;
        this.createdAt = value.createdAt;
        this.updatedAt = value.updatedAt;
    }

    public Invoice(
        UInteger  id,
        Byte      paid,
        Timestamp createdAt,
        Timestamp updatedAt
    ) {
        this.id = id;
        this.paid = paid;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }

    public UInteger getId() {
        return this.id;
    }

    public void setId(UInteger id) {
        this.id = id;
    }

    public Byte getPaid() {
        return this.paid;
    }

    public void setPaid(Byte paid) {
        this.paid = paid;
    }

    public Timestamp getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Timestamp createdAt) {
        this.createdAt = createdAt;
    }

    public Timestamp getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(Timestamp updatedAt) {
        this.updatedAt = updatedAt;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Invoice (");

        sb.append(id);
        sb.append(", ").append(paid);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(updatedAt);

        sb.append(")");
        return sb.toString();
    }

    public void setOrders(List<Order> orders) {
        this.orders = orders;
    }

    public List<Order> getOrders() {
        return orders;
    }

    public String getWaiters() {
        if(getOrders() == null)
            return "";
        return getOrders().stream().map(Order::getWaiter).map(Waiter::getName).collect(Collectors.joining(", "));
    }

    public UInteger getTable() {
        if(getOrders() == null)
            return null;
        return getOrders().stream()
                .map(Order::getTableId)
                .findFirst()
                .orElse(null);
    }

    public List<InvoiceEntry> getProductListInvoice(String languageCode, String currency) {
        if(getOrders() == null)
            return new ArrayList<>();

        List<ProductPriceForOrder> productPriceForOrderList = getOrders().stream()
                .flatMap(order -> order.getProductPriceForOrder()
                        .stream()).collect(toList());

        List<InvoiceEntry> invoiceEntryList = new ArrayList<>();

        // Iterate through product localized in given language
        productPriceForOrderList.stream()
                .map(ProductPriceForOrder::getProduct)
                .flatMap(product ->
                        product.getProductLocalized()
                                .stream()
                                .filter(pL ->
                                        pL.getLanguageCode()
                                                .equals(languageCode))
                ).forEach(productLocalized -> {
            // Get product info (quantity, price of product in order
            productPriceForOrderList.stream()
                .filter(ppfo -> ppfo.getProductId().equals(productLocalized.getProductId()))
                .findFirst()
                .ifPresent(productInfo -> {

                    String totalPriceOfProduct = String.format("%.2f " + currency,
                            Math.round(
                                    productInfo.getQuantity().longValue() * productInfo.getPricePerProduct() * 100D
                            ) / 100D);
                    invoiceEntryList.add(
                            new InvoiceEntry(
                                productInfo.getQuantity() + "x " + productLocalized.getLabel(),
                                String.format("%.2f " + currency, productInfo.getPricePerProduct()),
                                totalPriceOfProduct
                            )
                    );

                });
        });
        return invoiceEntryList;
    }

    public String getTotalPrice(String currency) {
        if(getOrders() == null)
            return "";

        List<ProductPriceForOrder> productPriceForOrderList = getOrders().stream()
                .flatMap(order -> order.getProductPriceForOrder()
                        .stream()).collect(toList());

        double total = productPriceForOrderList.stream()
                .mapToDouble(ppfo -> ppfo.getPricePerProduct() * ppfo.getQuantity().longValue())
                .sum();
        total = Math.round(total * 100D) / 100D;
        return String.format("%.2f " + currency, total);
    }

    public static class InvoiceEntry {
        public final String productName, productPrice, productPriceTotal;

        public InvoiceEntry(String productName, String productPrice, String productPriceTotal) {
            this.productName = productName;
            this.productPrice = productPrice;
            this.productPriceTotal = productPriceTotal;
        }
    }
}
