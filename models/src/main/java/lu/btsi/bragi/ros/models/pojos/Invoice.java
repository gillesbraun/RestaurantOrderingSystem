/*
 * This file is generated by jOOQ.
*/
package lu.btsi.bragi.ros.models.pojos;


import java8.util.stream.Collectors;
import java8.util.stream.StreamSupport;
import org.jooq.types.UInteger;

import javax.annotation.Generated;
import java.io.Serializable;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Invoice implements Serializable {

    private static final long serialVersionUID = -852538769;

    private UInteger  id;
    private Byte      paid;
    private Timestamp createdAt;
    private Timestamp updatedAt;
    private List<Order> orders;

    public Invoice() {}

    public Invoice(Invoice value) {
        this.id = value.id;
        this.paid = value.paid;
        this.createdAt = value.createdAt;
        this.updatedAt = value.updatedAt;
    }

    public Invoice(
        UInteger  id,
        Byte      paid,
        Timestamp createdAt,
        Timestamp updatedAt
    ) {
        this.id = id;
        this.paid = paid;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }

    public UInteger getId() {
        return this.id;
    }

    public void setId(UInteger id) {
        this.id = id;
    }

    public Byte getPaid() {
        return this.paid;
    }

    public void setPaid(Byte paid) {
        this.paid = paid;
    }

    public Timestamp getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Timestamp createdAt) {
        this.createdAt = createdAt;
    }

    public Timestamp getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(Timestamp updatedAt) {
        this.updatedAt = updatedAt;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Invoice (");

        sb.append(id);
        sb.append(", ").append(paid);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(updatedAt);

        sb.append(")");
        return sb.toString();
    }

    public void setOrders(List<Order> orders) {
        this.orders = orders;
    }

    public List<Order> getOrders() {
        return orders;
    }

    public String getWaiters() {
        if(getOrders() == null)
            return "";
        return StreamSupport.stream(getOrders()).map(Order::getWaiter).map(Waiter::getName).distinct().collect(Collectors.joining(", "));
    }

    public UInteger getTable() {
        if(getOrders() == null)
            return null;
        return getOrders().stream()
                .map(Order::getTableId)
                .findFirst()
                .orElse(null);
    }

    public List<InvoiceEntry> getProductListInvoice(Language language, String currency) {
        if(getOrders() == null)
            return new ArrayList<>();

        List<InvoiceEntry> invoiceEntryList = StreamSupport.stream(orders)
                .flatMap(order ->
                        StreamSupport.stream(order.getProductPriceForOrder())
                        .map(ppfo ->
                                new InvoiceEntry(
                                        ppfo.getQuantity(),
                                        ppfo.getProductInLanguage(language).getLabel(),
                                        String.format("%.2f", ppfo.getPricePerProduct().doubleValue()),
                                        String.format("%.2f", ppfo.getTotalPriceOfProduct().doubleValue())
                                )
                        )
                )
                .collect(Collectors.toList());
        return invoiceEntryList;
    }

    public String getTotalPrice(String currency) {
        if(getOrders() == null)
            return "";
        BigDecimal total = StreamSupport.stream(orders)
                .map(Order::getTotalPriceOfOrder)
                .reduce(BigDecimal::add)
                .get();
        return String.format("%.2f " + currency, total.doubleValue());
    }

    public static class InvoiceEntry {
        public final String productName, productPrice, productPriceTotal;
        public final UInteger quantity;

        public InvoiceEntry(UInteger quantity, String productName, String productPrice, String productPriceTotal) {
            this.quantity = quantity;
            this.productName = productName;
            this.productPrice = productPrice;
            this.productPriceTotal = productPriceTotal;
        }
    }
}
