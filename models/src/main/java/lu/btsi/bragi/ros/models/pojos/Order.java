/*
 * This file is generated by jOOQ.
*/
package lu.btsi.bragi.ros.models.pojos;


import java8.util.Optional;
import java8.util.stream.Collectors;
import java8.util.stream.StreamSupport;
import org.jooq.types.UInteger;

import javax.annotation.Generated;
import java.io.Serializable;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Order implements Serializable {

    private static final long serialVersionUID = -276657291;

    private UInteger  id;
    private Byte      processing;
    private Byte      processingDone;
    private UInteger  tableId;
    private UInteger  waiterId;
    private UInteger  invoiceId;
    private Timestamp createdAt;
    private Timestamp updatedAt;
    private Waiter    waiter;
    private List<ProductPriceForOrder> productPriceForOrder;
    private Table table;

    public Order() {}

    public Order(Order value) {
        this.id = value.id;
        this.processing = value.processing;
        this.processingDone = value.processingDone;
        this.tableId = value.tableId;
        this.waiterId = value.waiterId;
        this.invoiceId = value.invoiceId;
        this.createdAt = value.createdAt;
        this.updatedAt = value.updatedAt;
    }

    public Order(
        UInteger  id,
        Byte      processing,
        Byte      processingDone,
        UInteger  tableId,
        UInteger  waiterId,
        UInteger  invoiceId,
        Timestamp createdAt,
        Timestamp updatedAt
    ) {
        this.id = id;
        this.processing = processing;
        this.processingDone = processingDone;
        this.tableId = tableId;
        this.waiterId = waiterId;
        this.invoiceId = invoiceId;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }

    public UInteger getId() {
        return this.id;
    }

    public void setId(UInteger id) {
        this.id = id;
    }

    public Byte getProcessing() {
        return this.processing;
    }

    public void setProcessing(Byte processing) {
        this.processing = processing;
    }

    public Byte getProcessingDone() {
        return this.processingDone;
    }

    public void setProcessingDone(Byte processingDone) {
        this.processingDone = processingDone;
    }

    public UInteger getTableId() {
        return this.tableId;
    }

    public void setTableId(UInteger tableId) {
        this.tableId = tableId;
    }

    public UInteger getWaiterId() {
        return this.waiterId;
    }

    public void setWaiterId(UInteger waiterId) {
        this.waiterId = waiterId;
    }

    public UInteger getInvoiceId() {
        return this.invoiceId;
    }

    public void setInvoiceId(UInteger invoiceId) {
        this.invoiceId = invoiceId;
    }

    public Timestamp getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Timestamp createdAt) {
        this.createdAt = createdAt;
    }

    public Timestamp getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(Timestamp updatedAt) {
        this.updatedAt = updatedAt;
    }

    public Waiter getWaiter() {
        return waiter;
    }

    public void setWaiter(Waiter waiter) {
        this.waiter = waiter;
    }

    public List<ProductPriceForOrder> getProductPriceForOrder() {
        return productPriceForOrder;
    }

    public void setProductPriceForOrder(List<ProductPriceForOrder> productPriceForOrder) {
        this.productPriceForOrder = productPriceForOrder;
    }

    public Table getTable() {
        return table;
    }

    public void setTable(Table table) {
        this.table = table;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Order (");

        sb.append(id);
        sb.append(", ").append(processing);
        sb.append(", ").append(processingDone);
        sb.append(", ").append(tableId);
        sb.append(", ").append(waiterId);
        sb.append(", ").append(invoiceId);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(updatedAt);

        sb.append(")");
        return sb.toString();
    }

    public BigDecimal getTotalPriceOfOrder() {
        return StreamSupport.stream(productPriceForOrder)
                .map(ProductPriceForOrder::getTotalPriceOfProduct)
                .reduce(BigDecimal::add)
                .get();
    }

    public List<ProductLocalized> getProductsLocalized(Language language) {
        return StreamSupport.stream(productPriceForOrder)
                .map(ppfo -> ppfo.getProductInLanguage(language))
                .collect(Collectors.toList());
    }

    public static List<ProductPriceForOrder> combineOrders(List<Order> orders) {
        Map<UInteger, List<ProductPriceForOrder>> collect = StreamSupport.stream(orders)
                .flatMap(order ->
                        StreamSupport.stream(order.getProductPriceForOrder()))
                .collect(Collectors.groupingBy(
                        ppfo -> ppfo.getProductId()
                ));
        List<ProductPriceForOrder> returning = new ArrayList<>();
        for (Map.Entry<UInteger, List<ProductPriceForOrder>> entry : collect.entrySet()) {
            UInteger product = entry.getKey();
            List<ProductPriceForOrder> value = entry.getValue();
            ProductPriceForOrder ppfo = new ProductPriceForOrder();

            Optional<UInteger> quantity = StreamSupport.stream(value)
                    .map(ProductPriceForOrder::getQuantity)
                    .reduce((uInteger, uInteger2) -> UInteger.valueOf(uInteger.longValue() + uInteger2.longValue()));

            if(quantity.isPresent()) {
                ppfo.setQuantity(quantity.get());
            }

            if(value.size() > 0) {
                ppfo.setPricePerProduct(value.get(0).getPricePerProduct());
                ppfo.setProduct(value.get(0).getProduct());
            }

            returning.add(ppfo);
        }
        return returning;
    }
}
























