/*
 * This file is generated by jOOQ.
*/
package lu.btsi.bragi.ros.server.database.tables;


import lu.btsi.bragi.ros.server.database.Keys;
import lu.btsi.bragi.ros.server.database.Ros;
import lu.btsi.bragi.ros.server.database.tables.records.TableRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;

import javax.annotation.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Table extends TableImpl<TableRecord> {

    private static final long serialVersionUID = -1903497465;

    /**
     * The reference instance of <code>ros.Table</code>
     */
    public static final Table TABLE = new Table();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TableRecord> getRecordType() {
        return TableRecord.class;
    }

    /**
     * The column <code>ros.Table.id</code>.
     */
    public final TableField<TableRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>ros.Table.created_at</code>.
     */
    public final TableField<TableRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>ros.Table.updated_at</code>.
     */
    public final TableField<TableRecord, Timestamp> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>ros.Table</code> table reference
     */
    public Table() {
        this("Table", null);
    }

    /**
     * Create an aliased <code>ros.Table</code> table reference
     */
    public Table(String alias) {
        this(alias, TABLE);
    }

    private Table(String alias, org.jooq.Table<TableRecord> aliased) {
        this(alias, aliased, null);
    }

    private Table(String alias, org.jooq.Table<TableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Ros.ROS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TableRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_TABLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TableRecord> getPrimaryKey() {
        return Keys.KEY_TABLE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TableRecord>> getKeys() {
        return Arrays.<UniqueKey<TableRecord>>asList(Keys.KEY_TABLE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Table as(String alias) {
        return new Table(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Table rename(String name) {
        return new Table(name, null);
    }
}
