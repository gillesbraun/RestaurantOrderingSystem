/*
 * This file is generated by jOOQ.
*/
package lu.btsi.bragi.ros.server.database.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import lu.btsi.bragi.ros.server.database.Keys;
import lu.btsi.bragi.ros.server.database.Ros;
import lu.btsi.bragi.ros.server.database.tables.records.ProductpricefororderRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Productpricefororder extends TableImpl<ProductpricefororderRecord> {

    private static final long serialVersionUID = 1291365809;

    /**
     * The reference instance of <code>ros.ProductPriceForOrder</code>
     */
    public static final Productpricefororder PRODUCTPRICEFORORDER = new Productpricefororder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductpricefororderRecord> getRecordType() {
        return ProductpricefororderRecord.class;
    }

    /**
     * The column <code>ros.ProductPriceForOrder.product_id</code>.
     */
    public final TableField<ProductpricefororderRecord, UInteger> PRODUCT_ID = createField("product_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>ros.ProductPriceForOrder.order_id</code>.
     */
    public final TableField<ProductpricefororderRecord, UInteger> ORDER_ID = createField("order_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>ros.ProductPriceForOrder.price</code>.
     */
    public final TableField<ProductpricefororderRecord, Double> PRICE = createField("price", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>ros.ProductPriceForOrder.created_at</code>.
     */
    public final TableField<ProductpricefororderRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>ros.ProductPriceForOrder.updated_at</code>.
     */
    public final TableField<ProductpricefororderRecord, Timestamp> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>ros.ProductPriceForOrder</code> table reference
     */
    public Productpricefororder() {
        this("ProductPriceForOrder", null);
    }

    /**
     * Create an aliased <code>ros.ProductPriceForOrder</code> table reference
     */
    public Productpricefororder(String alias) {
        this(alias, PRODUCTPRICEFORORDER);
    }

    private Productpricefororder(String alias, Table<ProductpricefororderRecord> aliased) {
        this(alias, aliased, null);
    }

    private Productpricefororder(String alias, Table<ProductpricefororderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Ros.ROS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProductpricefororderRecord> getPrimaryKey() {
        return Keys.KEY_PRODUCTPRICEFORORDER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProductpricefororderRecord>> getKeys() {
        return Arrays.<UniqueKey<ProductpricefororderRecord>>asList(Keys.KEY_PRODUCTPRICEFORORDER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ProductpricefororderRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProductpricefororderRecord, ?>>asList(Keys.FK_PRODUCTPRICEFORORDER_PRODUCT, Keys.FK_PRODUCTPRICEFORORDER_ORDER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Productpricefororder as(String alias) {
        return new Productpricefororder(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Productpricefororder rename(String name) {
        return new Productpricefororder(name, null);
    }
}
