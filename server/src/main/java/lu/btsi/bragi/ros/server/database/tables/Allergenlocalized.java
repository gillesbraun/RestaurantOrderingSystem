/*
 * This file is generated by jOOQ.
*/
package lu.btsi.bragi.ros.server.database.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import lu.btsi.bragi.ros.server.database.Keys;
import lu.btsi.bragi.ros.server.database.Ros;
import lu.btsi.bragi.ros.server.database.tables.records.AllergenlocalizedRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is database by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is database by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Allergenlocalized extends TableImpl<AllergenlocalizedRecord> {

    private static final long serialVersionUID = -2121883956;

    /**
     * The reference instance of <code>ros.AllergenLocalized</code>
     */
    public static final Allergenlocalized ALLERGENLOCALIZED = new Allergenlocalized();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AllergenlocalizedRecord> getRecordType() {
        return AllergenlocalizedRecord.class;
    }

    /**
     * The column <code>ros.AllergenLocalized.allergen_id</code>.
     */
    public final TableField<AllergenlocalizedRecord, UInteger> ALLERGEN_ID = createField("allergen_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>ros.AllergenLocalized.language_code</code>.
     */
    public final TableField<AllergenlocalizedRecord, String> LANGUAGE_CODE = createField("language_code", org.jooq.impl.SQLDataType.CHAR.length(2).nullable(false), this, "");

    /**
     * Create a <code>ros.AllergenLocalized</code> table reference
     */
    public Allergenlocalized() {
        this("AllergenLocalized", null);
    }

    /**
     * Create an aliased <code>ros.AllergenLocalized</code> table reference
     */
    public Allergenlocalized(String alias) {
        this(alias, ALLERGENLOCALIZED);
    }

    private Allergenlocalized(String alias, Table<AllergenlocalizedRecord> aliased) {
        this(alias, aliased, null);
    }

    private Allergenlocalized(String alias, Table<AllergenlocalizedRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Ros.ROS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AllergenlocalizedRecord> getPrimaryKey() {
        return Keys.KEY_ALLERGENLOCALIZED_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AllergenlocalizedRecord>> getKeys() {
        return Arrays.<UniqueKey<AllergenlocalizedRecord>>asList(Keys.KEY_ALLERGENLOCALIZED_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AllergenlocalizedRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AllergenlocalizedRecord, ?>>asList(Keys.FK_ALLERGENLOCALIZED_ALLERGEN, Keys.FK_ALLERGENLOCALIZED_LANGUAGE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Allergenlocalized as(String alias) {
        return new Allergenlocalized(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Allergenlocalized rename(String name) {
        return new Allergenlocalized(name, null);
    }
}
